__version__ = (1, 0, 1)
# meta developer: @psyho_Kuznetsov

import logging
from datetime import datetime
from telethon.tl.types import Message
from .. import loader, utils

@loader.tds
class DeleteChatMessagesModule(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""

    strings = {  
        "name": "DeleteMessages",  
        "description": "–ú–æ–¥—É–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.",  
        "deleting": "<b>üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...</b>",  
        "deleted": "<b>‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>",  
        "error": "<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏:</b> {}"  
    }  

    async def client_ready(self, client, db):  
        self._client = client  
        self._db = db  
        self._me = await client.get_me()  

    async def delchatmecmd(self, message: Message):  
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ.  
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>.delchatme [ID —á–∞—Ç–∞]</code>  
        –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ."""  
          
        args = utils.get_args_raw(message)  
        if not args:  
            chat_id = message.chat_id  
        else:  
            try:  
                chat_id = int(args)  
            except ValueError:  
                await message.edit("<b>‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞!</b>")  
                return  

        try:  
            status_msg = await message.edit(self.strings["deleting"])  
              
            async for msg in self._client.iter_messages(  
                chat_id,  
                from_user=self._me.id,  
                reverse=True  
            ):  
                try:  
                    await msg.delete()  
                except Exception as e:  
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.id}: {str(e)}")  
                    continue  

            await status_msg.edit(self.strings["deleted"])  
            await status_msg.delete()  

        except Exception as e:  
            error_text = self.strings["error"].format(str(e))  
            await message.edit(error_text)  
            logging.exception(error_text)

__version__ = (5, 2, 1)
# meta developer: @psyho_Kuznetsov

from .. import loader, utils
from telethon.tl.types import Message
import requests
import logging
from io import BytesIO
import random
import json
import aiohttp

logger = logging.getLogger(__name__)

@loader.tds
class UploaderPro(loader.Module):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã."""
    strings = {
        "name": "UploaderPro",
        "description": "üì§ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (Catbox, Envs.sh, 0x0.st –∏ –¥—Ä.).",
        "uploading": "üîÑ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...</b>",
        "no_reply": "‚ùå <b>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, —Ñ–∞–π–ª) –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.</b>",
        "success": "‚úÖ <b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\nüîó <b>–°—Å—ã–ª–∫–∞:</b> <code>{}</code>",
        "error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:</b> <code>{}</code>",
        "file_too_big": "‚ùå <b>–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.</b>",
        "update_check": "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...</b>",
        "update_available": "üì¢ <b>–î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!</b>\n üí´ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ:\n<code>.dlm https://raw.githubusercontent.com/psyhoKuznetsov/Hikka-Models/refs/heads/main/UploaderPro.py</code>",
        "no_update": "‚úÖ <b>–£ –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è!</b>",
    }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db

    async def _get_latest_version(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é —Å GitHub."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get('https://raw.githubusercontent.com/psyhoKuznetsov/Hikka-Models/refs/heads/main/UploaderPro.py') as response:
                    if response.status == 200:
                        content = await response.text()
                        for line in content.split('\n'):
                            if line.startswith('__version__'):
                                return eval(line.split('=')[1].strip())
        except:
            return None
        return None

    @loader.unrestricted
    async def updateprocmd(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è."""
        await utils.answer(message, self.strings["update_check"])
        
        current_version = __version__
        latest_version = await self._get_latest_version()
        
        if latest_version and latest_version > current_version:
            await utils.answer(
                message,
                self.strings["update_available"].format(
                    '.'.join(map(str, current_version)),
                    '.'.join(map(str, latest_version))
                )
            )
        else:
            await utils.answer(message, self.strings["no_update"])

    async def _get_file(self, message: Message):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        reply = await message.get_reply_message()
        if not reply or not reply.media:
            await utils.answer(message, self.strings["no_reply"])
            return None

        file = BytesIO()
        file.name = reply.file.name or f"file_{random.randint(1000, 9999)}.{reply.file.ext}"
        await self._client.download_media(reply.media, file)
        file.seek(0)
        return file

    async def _upload_to_service(self, file, service_url, field_name="file", extra_data=None):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å."""
        try:
            data = extra_data or {}
            files = {field_name: file}
            response = requests.post(service_url, data=data, files=files)
            if response.status_code == 200:
                return response.text.strip()
            else:
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return None

    async def _parse_json_response(self, response_text):
        """–ü–∞—Ä—Å–∏—Ç JSON-–æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫—É."""
        try:
            data = json.loads(response_text)
            if isinstance(data, dict):
                if data.get("status") == "success" and "data" in data:
                    return data["data"].get("url")
                elif "files" in data and isinstance(data["files"], list):
                    return data["files"][0].get("url")
                elif "url" in data:
                    return data["url"]
        except json.JSONDecodeError:
            return response_text
        return None

    @loader.unrestricted
    async def catboxcmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Catbox.moe. –ò—Å–ø–æ–ª—å–∑—É–π: .catbox (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        link = await self._upload_to_service(
            file,
            "https://catbox.moe/user/api.php",
            field_name="fileToUpload",
            extra_data={"reqtype": "fileupload"}
        )
        if link:
            await utils.answer(message, self.strings["success"].format(link))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def envscmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ Envs.sh. –ò—Å–ø–æ–ª—å–∑—É–π: .envs (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        link = await self._upload_to_service(
            file,
            "https://envs.sh",
            field_name="file"
        )
        if link:
            await utils.answer(message, self.strings["success"].format(link))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def oxocmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ 0x0.st. –ò—Å–ø–æ–ª—å–∑—É–π: .oxo (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        link = await self._upload_to_service(
            file,
            "https://0x0.st",
            field_name="file"
        )
        if link:
            await utils.answer(message, self.strings["success"].format(link))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def x0cmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ x0.at. –ò—Å–ø–æ–ª—å–∑—É–π: .x0 (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        link = await self._upload_to_service(
            file,
            "https://x0.at",
            field_name="file"
        )
        if link:
            await utils.answer(message, self.strings["success"].format(link))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def tmpfilescmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ tmpfiles.org. –ò—Å–ø–æ–ª—å–∑—É–π: .tmpfiles (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        response_text = await self._upload_to_service(
            file,
            "https://tmpfiles.org/api/v1/upload",
            field_name="file"
        )
        
        if response_text:
            try:
                data = json.loads(response_text)
                if data.get("status") == "success" and "data" in data:
                    link = data["data"]["url"]
                    await utils.answer(message, self.strings["success"].format(link))
                else:
                    await utils.answer(message, self.strings["error"].format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"))
            except json.JSONDecodeError:
                await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON"))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def pomfcmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ pomf.lain.la. –ò—Å–ø–æ–ª—å–∑—É–π: .pomf (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        response_text = await self._upload_to_service(
            file,
            "https://pomf.lain.la/upload.php",
            field_name="files[]"
        )
        if response_text:
            link = await self._parse_json_response(response_text)
            if link:
                await utils.answer(message, self.strings["success"].format(link))
            else:
                await utils.answer(message, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É"))
        else:
            await utils.answer(message, self.strings["error"].format("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"))

    @loader.unrestricted
    async def bashcmd(self, message: Message):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ bashupload.com. –ò—Å–ø–æ–ª—å–∑—É–π: .bash (–æ—Ç–≤–µ—Ç –Ω–∞ –º–µ–¥–∏–∞)."""
        file = await self._get_file(message)
        if not file:
            return

        await utils.answer(message, self.strings["uploading"])
        try:
            response = requests.put(
                "https://bashupload.com",
                data=file.read()
            )
            if response.ok:
                urls = [line for line in response.text.split("\n") if "wget" in line]
                if urls:
                    url = urls[0].split()[-1]
                    await utils.answer(message, self.strings["success"].format(url))
                else:
                    await utils.answer(message, self.strings["error"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É"))
            else:
                await utils.answer(message, self.strings["error"].format(response.status_code))
        except Exception as e:
            await utils.answer(message, self.strings["error"].format(str(e)))
